const express = require('express');
const router = express.Router();

// Example in-memory data (usually replaced with database queries)
let posts = [
  { id: 1, title: 'First Post', content: 'This is the first post content' },
  { id: 2, title: 'Second Post', content: 'This is the second post content' }
];

// GET all posts
router.get('/', (req, res) => {
  res.json(posts); // Respond with JSON array containing all posts
});

// GET post by ID
router.get('/:id', (req, res) => {
  const post = posts.find(p => p.id === parseInt(req.params.id)); // Find post by ID
  if (!post) return res.status(404).send('Post not found'); // If post not found, send 404 response
  res.json(post); // Respond with JSON object containing the post
});

// POST a new post
router.post('/', (req, res) => {
  const newPost = { // Create a new post object
    id: posts.length + 1, // Assign a unique ID (usually generated by a database)
    title: req.body.title, // Extract title from request body
    content: req.body.content // Extract content from request body
  };
  posts.push(newPost); // Add the new post to the posts array
  res.status(201).json(newPost); // Respond with the newly created post and status code 201 (Created)
});

// PATCH an existing post
router.patch('/:id', (req, res) => {
  const post = posts.find(p => p.id === parseInt(req.params.id)); // Find post by ID
  if (!post) return res.status(404).send('Post not found'); // If post not found, send 404 response

  // Update post properties if provided in the request body
  if (req.body.title) post.title = req.body.title; // Update title if provided
  if (req.body.content) post.content = req.body.content; // Update content if provided

  res.json(post); // Respond with the updated post
});

// DELETE a post
router.delete('/:id', (req, res) => {
  const postIndex = posts.findIndex(p => p.id === parseInt(req.params.id)); // Find index of post by ID
  if (postIndex === -1) return res.status(404).send('Post not found'); // If post not found, send 404 response

  const deletedPost = posts.splice(postIndex, 1); // Remove post from array
  res.json(deletedPost); // Respond with the deleted post
});

module.exports = router; // Export the router to be used in other parts of the application
